import junit.framework.Assert.assertEquals
import DAVID.FunDisNPLBMRow._
import DAVID.Common.ProbabilisticTools._
import org.junit.Assert
import org.junit.Assert.assertArrayEquals
class AggregatorColUtilTest {
  @org.junit.Test
  def map_local_global_partition_test():Unit={
  /*cluster_partition: List(worker_id,global_k)*/
  val cluster_partition: List[(Int, Int)]=List((0,4),(0,4),(0,6),(0,0),(0,0),(0,0),(0,6),
    (0,7),(0,1),(1,0),(1,7),(1,6),(2,7),(2,6),(2,6),(2,7),(2,7),(2,8),(2,2),(2,9),
    (2,4),(3,8),(3,8),(3,0),(4,2),(4,8),(4,1),(4,1),(4,3),(4,3),(4,7),(4,5),(5,1),
    (5,2),(6,3),(7,2),(7,3),(7,0),(7,5),(7,9),(8,9),(8,1),(9,1),(9,2),(9,6),(9,9),(9,1))
  /*local_k_cluster: List(worker_local_k)*/
  val local_k_cluster: List[Int]=List(0,1,2,3,4,5,6,7,8,0,1,2,0,1,2,3,4,5,6,7,8,0
    ,1,2,0,1,2,3,4,5,6,7,0,1,0,0,1,2,3,4,0,1,0,1,2,3,4)
  assertEquals(s"number of workers' local clusters in the master and in the workers",
    local_k_cluster.size,cluster_partition.size)
  val expected:List[(Int,Int,Int)]=List((0,0,4),(0,1,4),(0,2,6),(0,3,0),(0,4,0),(0,5,0),(0,6,6),(0,7,7),(0,8,1),
    (1,0,0),(1,1,7),(1,2,6),(2,0,7),(2,1,6),(2,2,6),(2,3,7),(2,4,7),(2,5,8),(2,6,2),(2,7,9),(2,8,4),(3,0,8),(3,1,8),
    (3,2,0),(4,0,2),(4,1,8),(4,2,1),(4,3,1),(4,4,3),(4,5,3),(4,6,7),(4,7,5),(5,0,1),(5,1,2),(6,0,3),(7,0,2),(7,1,3),
    (7,2,0),(7,3,5),(7,4,9),(8,0,9),(8,1,1),(9,0,1),(9,1,2),(9,2,6),(9,3,9),(9,4,1))
  val actual=map_local_global_partition(cluster_partition, local_k_cluster)
  assertEquals("map_local_global_partition size comparison",expected.size,actual.size)
  expected.indices.foreach(i=>{
    assertEquals(s"element index $i",expected(i),actual(i))
  })
}
  @org.junit.Test
  def global_line_partition_test():Unit={
    val worker_result: List[(Int, Int, Int)]=List((0,2,0),(0,8,1),(0,1,2),(0,5,3),(0,6,4),(0,6,5),(0,1,6),(0,5,7),
      (0,4,8),(0,5,9),(0,8,10),(0,5,11),(0,0,12),(0,0,13),(0,9,14),(0,8,15),(0,3,16),(0,9,17),(0,4,18),(0,0,19),
      (0,7,20),(0,3,21),(0,9,22),(0,5,23),(0,8,24),(0,9,25),(0,2,26),(0,5,27),(0,9,28),(0,2,29),(0,7,30),(0,5,31),
      (0,5,32),(0,7,33),(0,8,34),(0,2,35),(0,9,36),(0,7,37),(0,9,38),(0,2,39),(0,5,40),(0,0,41),(0,4,42),(0,3,43),
      (0,1,44),(0,9,45),(0,7,46),(0,8,47),(0,4,48),(0,3,49),(0,2,50),(0,0,51),(0,3,52),(0,6,53),(0,0,54),(0,2,55),
      (0,6,56),(0,2,57),(0,9,58),(0,7,59),(0,7,60),(0,1,61),(0,6,62),(0,5,63),(0,3,64),(0,0,65),(0,9,66),(0,0,67),
      (0,3,68),(0,9,69),(0,6,70),(0,5,71),(0,9,72),(0,9,73),(0,9,74),(0,4,75),(0,9,76),(0,7,77),(0,9,78),(0,3,79),
      (0,1,80),(0,6,81),(0,2,82),(0,2,83),(0,5,84),(0,3,85),(0,9,86),(0,4,87),(0,3,88),(0,4,89),(0,5,90),(0,6,91),
      (0,1,92),(0,3,93),(0,8,94),(0,3,95),(0,8,96),(0,3,97),(0,0,98),(0,9,99),(1,2,100),(1,4,101),(1,7,102),
      (1,9,103),(1,7,104),(1,9,105),(1,9,106),(1,8,107),(1,0,108),(1,1,109),(1,8,110),(1,6,111),(1,0,112),
      (1,2,113),(1,2,114),(1,4,115),(1,8,116),(1,4,117),(1,9,118),(1,7,119),(1,6,120),(1,5,121),(1,9,122),
      (1,4,123),(1,0,124),(1,6,125),(1,1,126),(1,2,127),(1,8,128),(1,9,129),(1,0,130),(1,6,131),(1,0,132),
      (1,0,133),(1,2,134),(1,1,135),(1,9,136),(1,9,137),(1,9,138),(1,1,139),(1,6,140),(1,9,141),(1,6,142),
      (1,9,143),(1,1,144),(1,4,145),(1,7,146),(1,1,147),(1,7,148),(1,8,149),(1,5,150),(1,6,151),(1,9,152),
      (1,6,153),(1,9,154),(1,1,155),(1,0,156),(1,1,157),(1,1,158),(1,8,159),(1,6,160),(1,9,161),(1,6,162),
      (1,6,163),(1,1,164),(1,7,165),(1,0,166),(1,7,167),(1,7,168),(1,6,169),(1,8,170),(1,7,171),(1,8,172),
      (1,3,173),(1,4,174),(1,5,175),(1,9,176),(1,8,177),(1,9,178),(1,8,179),(1,9,180),(1,6,181),(1,5,182),
      (1,5,183),(1,7,184),(1,5,185),(1,3,186),(1,2,187),(1,5,188),(1,5,189),(1,1,190),(1,1,191),(1,7,192),
      (1,9,193),(1,2,194),(1,0,195),(1,5,196),(1,5,197),(1,6,198),(1,9,199),(2,1,200),(2,5,201),(2,1,202),
      (2,9,203),(2,3,204),(2,6,205),(2,3,206),(2,0,207),(2,5,208),(2,4,209),(2,2,210),(2,5,211),(2,1,212),
      (2,7,213),(2,4,214),(2,0,215),(2,1,216),(2,5,217),(2,0,218),(2,4,219),(2,3,220),(2,8,221),(2,3,222),
      (2,0,223),(2,6,224),(2,2,225),(2,3,226),(2,4,227),(2,0,228),(2,9,229),(2,4,230),(2,5,231),(2,4,232),
      (2,2,233),(2,8,234),(2,8,235),(2,1,236),(2,2,237),(2,2,238),(2,9,239),(2,3,240),(2,2,241),(2,3,242),
      (2,8,243),(2,5,244),(2,7,245),(2,4,246),(2,2,247),(2,7,248),(2,8,249),(2,8,250),(2,6,251),(2,5,252),
      (2,3,253),(2,9,254),(2,4,255),(2,2,256),(2,5,257),(2,9,258),(2,3,259),(2,2,260),(2,0,261),(2,2,262),
      (2,0,263),(2,4,264),(2,4,265),(2,2,266),(2,9,267),(2,6,268),(2,5,269),(2,7,270),(2,3,271),(2,1,272),
      (2,6,273),(2,3,274),(2,1,275),(2,2,276),(2,7,277),(2,3,278),(2,9,279),(2,5,280),(2,9,281),(2,1,282),
      (2,4,283),(2,2,284),(2,7,285),(2,3,286),(2,6,287),(2,9,288),(2,2,289),(2,3,290),(2,3,291),(2,9,292),
      (2,3,293),(2,8,294),(2,0,295),(2,9,296),(2,2,297),(2,6,298),(2,6,299),(3,7,300),(3,7,301),(3,4,302),
      (3,1,303),(3,9,304),(3,5,305),(3,2,306),(3,5,307),(3,7,308),(3,2,309),(3,7,310),(3,7,311),(3,4,312),
      (3,5,313),(3,7,314),(3,3,315),(3,1,316),(3,7,317),(3,9,318),(3,4,319),(3,6,320),(3,1,321),(3,9,322),
      (3,3,323),(3,9,324),(3,4,325),(3,9,326),(3,5,327),(3,2,328),(3,3,329),(3,8,330),(3,8,331),(3,3,332),
      (3,2,333),(3,2,334),(3,4,335),(3,2,336),(3,2,337),(3,7,338),(3,0,339),(3,6,340),(3,4,341),(3,2,342),
      (3,5,343),(3,6,344),(3,6,345),(3,1,346),(3,9,347),(3,1,348),(3,6,349),(3,5,350),(3,7,351),(3,2,352),
      (3,8,353),(3,9,354),(3,1,355),(3,4,356),(3,3,357),(3,0,358),(3,8,359),(3,7,360),(3,2,361),(3,0,362),
      (3,4,363),(3,0,364),(3,3,365),(3,8,366),(3,4,367),(3,0,368),(3,4,369),(3,7,370),(3,8,371),(3,7,372),
      (3,6,373),(3,7,374),(3,1,375),(3,7,376),(3,1,377),(3,2,378),(3,2,379),(3,9,380),(3,1,381),(3,5,382),
      (3,0,383),(3,7,384),(3,5,385),(3,8,386),(3,0,387),(3,1,388),(3,8,389),(3,6,390),(3,8,391),(3,2,392),
      (3,3,393),(3,1,394),(3,7,395),(3,2,396),(3,5,397),(3,9,398),(3,1,399),(4,0,400),(4,9,401),(4,0,402),
      (4,9,403),(4,1,404),(4,9,405),(4,5,406),(4,3,407),(4,6,408),(4,4,409),(4,5,410),(4,7,411),(4,7,412),
      (4,8,413),(4,1,414),(4,2,415),(4,4,416),(4,5,417),(4,0,418),(4,0,419),(4,6,420),(4,3,421),(4,9,422),
      (4,4,423),(4,9,424),(4,1,425),(4,0,426),(4,6,427),(4,2,428),(4,6,429),(4,2,430),(4,7,431),(4,8,432),
      (4,0,433),(4,6,434),(4,7,435),(4,7,436),(4,4,437),(4,4,438),(4,1,439),(4,0,440),(4,0,441),(4,4,442),
      (4,6,443),(4,1,444),(4,2,445),(4,1,446),(4,1,447),(4,9,448),(4,1,449),(4,0,450),(4,3,451),(4,6,452),
      (4,2,453),(4,2,454),(4,9,455),(4,6,456),(4,8,457),(4,5,458),(4,9,459),(4,1,460),(4,3,461),(4,4,462),
      (4,2,463),(4,2,464),(4,8,465),(4,0,466),(4,6,467),(4,4,468),(4,4,469),(4,5,470),(4,1,471),(4,7,472),
      (4,7,473),(4,1,474),(4,8,475),(4,8,476),(4,7,477),(4,7,478),(4,9,479),(4,7,480),(4,1,481),(4,4,482),
      (4,9,483),(4,4,484),(4,9,485),(4,2,486),(4,0,487),(4,8,488),(4,1,489),(4,5,490),(4,8,491),(4,2,492),
      (4,9,493),(4,1,494),(4,9,495),(4,6,496),(4,2,497),(4,4,498),(4,6,499),(5,0,500),(5,5,501),(5,8,502),
      (5,1,503),(5,5,504),(5,1,505),(5,8,506),(5,7,507),(5,1,508),(5,7,509),(5,0,510),(5,4,511),(5,0,512),
      (5,3,513),(5,3,514),(5,5,515),(5,2,516),(5,9,517),(5,2,518),(5,2,519),(5,9,520),(5,3,521),(5,9,522),
      (5,0,523),(5,5,524),(5,2,525),(5,6,526),(5,0,527),(5,9,528),(5,4,529),(5,5,530),(5,5,531),(5,0,532),
      (5,0,533),(5,5,534),(5,1,535),(5,9,536),(5,5,537),(5,5,538),(5,9,539),(5,4,540),(5,8,541),(5,9,542),(5,0,543),
      (5,0,544),(5,7,545),(5,4,546),(5,9,547),(5,2,548),(5,7,549),(5,7,550),(5,8,551),(5,5,552),(5,5,553),(5,0,554),
      (5,8,555),(5,0,556),(5,5,557),(5,4,558),(5,6,559),(5,8,560),(5,5,561),(5,3,562),(5,9,563),(5,8,564),(5,9,565),
      (5,1,566),(5,3,567),(5,2,568),(5,1,569),(5,9,570),(5,8,571),(5,3,572),(5,8,573),(5,7,574),(5,6,575),(5,0,576),
      (5,3,577),(5,5,578),(5,9,579),(5,5,580),(5,1,581),(5,4,582),(5,2,583),(5,4,584),(5,7,585),(5,8,586),(5,7,587),
      (5,3,588),(5,4,589),(5,0,590),(5,0,591),(5,8,592),(5,9,593),(5,6,594),(5,4,595),(5,2,596),(5,9,597),(5,6,598),
      (5,8,599),(6,0,600),(6,5,601),(6,3,602),(6,6,603),(6,7,604),(6,5,605),(6,5,606),(6,2,607),(6,6,608),(6,7,609),
      (6,1,610),(6,0,611),(6,3,612),(6,1,613),(6,1,614),(6,8,615),(6,3,616),(6,4,617),(6,7,618),(6,0,619),(6,4,620),
      (6,4,621),(6,7,622),(6,1,623),(6,3,624),(6,3,625),(6,1,626),(6,2,627),(6,6,628),(6,4,629),(6,9,630),(6,3,631),
      (6,0,632),(6,0,633),(6,0,634),(6,1,635),(6,9,636),(6,0,637),(6,1,638),(6,1,639),(6,6,640),(6,8,641),(6,0,642),
      (6,0,643),(6,7,644),(6,3,645),(6,1,646),(6,0,647),(6,7,648),(6,9,649),(6,4,650),(6,3,651),(6,0,652),(6,5,653),
      (6,6,654),(6,2,655),(6,9,656),(6,3,657),(6,9,658),(6,1,659),(6,7,660),(6,8,661),(6,7,662),(6,9,663),(6,4,664),
      (6,3,665),(6,8,666),(6,3,667),(6,7,668),(6,2,669),(6,6,670),(6,0,671),(6,8,672),(6,6,673),(6,8,674),(6,8,675),
      (6,6,676),(6,3,677),(6,9,678),(6,0,679),(6,0,680),(6,4,681),(6,6,682),(6,9,683),(6,4,684),(6,1,685),(6,2,686),
      (6,5,687),(6,3,688),(6,9,689),(6,5,690),(6,4,691),(6,5,692),(6,4,693),(6,5,694),(6,9,695),(6,8,696),(6,9,697),
      (6,8,698),(6,3,699),(7,2,700),(7,3,701),(7,2,702),(7,3,703),(7,5,704),(7,8,705),(7,3,706),(7,6,707),(7,0,708),
      (7,9,709),(7,5,710),(7,1,711),(7,3,712),(7,3,713),(7,3,714),(7,3,715),(7,5,716),(7,7,717),(7,4,718),(7,1,719),
      (7,1,720),(7,0,721),(7,5,722),(7,7,723),(7,3,724),(7,1,725),(7,8,726),(7,1,727),(7,0,728),(7,9,729),(7,8,730),
      (7,9,731),(7,1,732),(7,7,733),(7,7,734),(7,8,735),(7,3,736),(7,6,737),(7,1,738),(7,0,739),(7,7,740),(7,8,741),
      (7,0,742),(7,2,743),(7,9,744),(7,4,745),(7,5,746),(7,9,747),(7,8,748),(7,1,749),(7,7,750),(7,3,751),(7,2,752),
      (7,2,753),(7,8,754),(7,9,755),(7,4,756),(7,2,757),(7,2,758),(7,8,759),(7,6,760),(7,0,761),(7,9,762),(7,0,763),
      (7,0,764),(7,6,765),(7,2,766),(7,1,767),(7,2,768),(7,0,769),(7,5,770),(7,5,771),(7,9,772),(7,3,773),(7,9,774),
      (7,9,775),(7,4,776),(7,6,777),(7,4,778),(7,2,779),(7,7,780),(7,1,781),(7,1,782),(7,1,783),(7,7,784),(7,2,785),
      (7,6,786),(7,5,787),(7,5,788),(7,3,789),(7,4,790),(7,7,791),(7,5,792),(7,0,793),(7,2,794),(7,3,795),(7,8,796),
      (7,3,797),(7,8,798),(7,7,799),(8,5,800),(8,9,801),(8,0,802),(8,5,803),(8,5,804),(8,5,805),(8,5,806),(8,0,807),
      (8,6,808),(8,5,809),(8,5,810),(8,0,811),(8,9,812),(8,7,813),(8,8,814),(8,3,815),(8,7,816),(8,0,817),(8,2,818),
      (8,1,819),(8,8,820),(8,9,821),(8,0,822),(8,4,823),(8,2,824),(8,2,825),(8,4,826),(8,8,827),(8,9,828),(8,0,829),
      (8,3,830),(8,6,831),(8,8,832),(8,9,833),(8,8,834),(8,6,835),(8,6,836),(8,1,837),(8,0,838),(8,2,839),(8,3,840),
      (8,2,841),(8,4,842),(8,1,843),(8,5,844),(8,5,845),(8,1,846),(8,4,847),(8,7,848),(8,2,849),(8,2,850),(8,3,851),
      (8,0,852),(8,5,853),(8,6,854),(8,2,855),(8,3,856),(8,8,857),(8,4,858),(8,6,859),(8,9,860),(8,1,861),(8,8,862),
      (8,3,863),(8,9,864),(8,2,865),(8,9,866),(8,2,867),(8,5,868),(8,4,869),(8,2,870),(8,4,871),(8,5,872),(8,0,873),
      (8,3,874),(8,7,875),(8,5,876),(8,8,877),(8,1,878),(8,4,879),(8,5,880),(8,6,881),(8,8,882),(8,8,883),(8,6,884),
      (8,3,885),(8,1,886),(8,7,887),(8,7,888),(8,7,889),(8,0,890),(8,4,891),(8,4,892),(8,4,893),(8,0,894),(8,9,895),
      (8,6,896),(8,3,897),(8,9,898),(8,4,899),(9,5,900),(9,5,901),(9,5,902),(9,5,903),(9,2,904),(9,2,905),(9,8,906),
      (9,9,907),(9,7,908),(9,2,909),(9,5,910),(9,0,911),(9,7,912),(9,1,913),(9,8,914),(9,0,915),(9,1,916),(9,2,917),
      (9,4,918),(9,5,919),(9,5,920),(9,6,921),(9,3,922),(9,9,923),(9,4,924),(9,8,925),(9,8,926),(9,4,927),(9,6,928),
      (9,3,929),(9,3,930),(9,8,931),(9,4,932),(9,9,933),(9,7,934),(9,0,935),(9,1,936),(9,2,937),(9,7,938),(9,5,939),
      (9,0,940),(9,7,941),(9,3,942),(9,6,943),(9,5,944),(9,1,945),(9,6,946),(9,8,947),(9,2,948),(9,0,949),(9,9,950),
      (9,3,951),(9,1,952),(9,5,953),(9,5,954),(9,7,955),(9,8,956),(9,0,957),(9,8,958),(9,6,959),(9,6,960),(9,0,961),
      (9,1,962),(9,4,963),(9,8,964),(9,6,965),(9,1,966),(9,7,967),(9,4,968),(9,9,969),(9,4,970),(9,9,971),(9,0,972),
      (9,5,973),(9,3,974),(9,3,975),(9,4,976),(9,8,977),(9,8,978),(9,1,979),(9,7,980),(9,7,981),(9,1,982),(9,8,983),
      (9,2,984),(9,7,985),(9,9,986),(9,4,987),(9,9,988),(9,4,989),(9,1,990),(9,7,991),(9,8,992),(9,6,993),(9,3,994),
      (9,2,995),(9,6,996),(9,2,997),(9,6,998),(9,3,999))
    val master_result: List[(Int, Int)]=List((0,6),(0,0),(0,8),(0,4),(0,2),(0,0),(0,8),(0,6),(0,3),(0,1),(1,4),(1,8),
      (1,5),(1,6),(1,7),(1,7),(1,6),(1,3),(1,1),(1,5),(2,4),(2,2),(2,1),(2,4),(2,5),(2,8),(2,1),(2,4),(2,9),(2,3),(3,0),
      (3,0),(3,8),(3,0),(3,9),(3,0),(3,0),(3,0),(3,3),(3,2),(4,8),(4,3),(4,9),(4,3),(4,4),(4,4),(4,7),(4,9),(4,4),(4,0),
      (5,4),(5,6),(5,0),(5,2),(5,9),(5,9),(5,5),(5,1),(5,8),(5,9),(6,3),(6,9),(6,8),(6,8),(6,0),(6,4),(6,7),(6,5),(6,2),
      (6,1),(7,6),(7,2),(7,6),(7,4),(7,6),(7,5),(7,3),(7,4),(7,8),(7,4),(8,9),(8,8),(8,9),(8,9),(8,8),(8,1),(8,4),(8,0),
      (8,7),(8,8),(9,9),(9,7),(9,2),(9,3),(9,3),(9,9),(9,1),(9,3),(9,0),(9,6))
    val local_k_cluster: List[Int]=List(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,
      9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5
      ,6,7,8,9)
    val expected=List(List((0,8,6),(0,0,5),(0,4,3),(0,1,9),(0,8,6),(0,2,4),(0,8,6),(0,4,3),(0,0,1),(0,6,0),(0,4,3),(0,0,1),
      (0,0,1),(0,4,3),(0,3,8),(0,2,4),(0,6,0),(0,8,6),(0,8,6),(0,6,0),(0,6,0),(0,0,1),(0,8,2),(0,8,6),(0,6,7),(0,0,1),
      (0,0,1),(0,1,9),(0,2,4),(0,6,0),(0,4,3),(0,3,8),(0,6,7),(0,3,8),(0,6,0),(0,4,3),(0,1,9),(0,6,0),(0,2,4),(0,0,1),
      (0,4,3),(0,4,3),(0,3,8),(0,0,1),(0,8,2),(0,6,7),(0,0,5),(0,1,9),(0,6,0),(0,1,9),(0,3,8),(0,3,8),(0,3,8),(0,4,3),
      (0,6,0),(0,3,8),(0,0,5),(0,1,9),(0,8,6),(0,6,0),(0,1,9),(0,1,9),(0,8,2),(0,0,5),(0,1,9),(0,4,3),(0,6,0),(0,8,2),
      (0,6,0),(0,1,9),(0,3,8),(0,0,1),(0,8,6),(0,4,3),(0,8,2),(0,0,5),(0,6,0),(0,3,8),(0,0,5),(0,4,3),(0,4,3),(0,8,6),
      (0,1,9),(0,4,3),(0,8,6),(0,3,8),(0,6,7),(0,6,7),(0,0,5),(0,4,3),(0,1,9),(0,0,1),(0,0,1),(0,4,3),(0,3,8),(0,2,4),
      (0,6,7),(0,4,3),(0,4,3),(0,6,0)),List((1,1,8),(1,8,1),(1,4,0),(1,5,2),(1,5,9),(1,7,5),(1,8,1),(1,4,0),(1,7,5),
      (1,4,0),(1,5,9),(1,5,2),(1,7,5),(1,6,6),(1,7,4),(1,7,5),(1,6,3),(1,4,0),(1,5,2),(1,4,0),(1,8,1),(1,5,2),(1,7,4),
      (1,6,6),(1,7,5),(1,4,0),(1,1,8),(1,6,6),(1,5,9),(1,4,0),(1,5,2),(1,8,1),(1,3,7),(1,7,4),(1,3,7),(1,4,0),(1,6,6),
      (1,5,9),(1,5,2),(1,6,3),(1,7,5),(1,5,2),(1,6,3),(1,1,8),(1,5,9),(1,7,4),(1,6,3),(1,6,6),(1,7,5),(1,7,4),(1,1,8),
      (1,7,5),(1,8,1),(1,5,2),(1,7,4),(1,7,5),(1,5,9),(1,1,8),(1,3,7),(1,4,0),(1,1,8),(1,5,9),(1,3,7),(1,7,4),(1,5,2),
      (1,6,6),(1,1,8),(1,5,9),(1,4,0),(1,4,0),(1,6,3),(1,7,4),(1,6,3),(1,3,7),(1,8,1),(1,8,1),(1,7,5),(1,7,5),(1,5,9),
      (1,3,7),(1,7,5),(1,1,8),(1,6,3),(1,5,2),(1,4,0),(1,7,4),(1,5,2),(1,8,1),(1,5,2),(1,5,2),(1,7,4),(1,5,2),(1,8,1),
      (1,7,4),(1,8,1),(1,7,4),(1,5,2),(1,6,3),(1,4,0),(1,7,5)),List((2,2,1),(2,9,8),(2,1,2),(2,3,9),(2,5,4),(2,4,3),
      (2,1,6),(2,5,4),(2,2,1),(2,1,2),(2,1,2),(2,1,2),(2,1,2),(2,1,2),(2,5,4),(2,4,7),(2,8,5),(2,8,5),(2,5,4),(2,9,8),
      (2,1,6),(2,3,9),(2,4,7),(2,1,2),(2,1,2),(2,1,6),(2,3,9),(2,9,8),(2,1,6),(2,4,0),(2,4,3),(2,1,6),(2,4,7),(2,4,3),
      (2,1,2),(2,4,3),(2,9,8),(2,9,8),(2,5,4),(2,3,9),(2,8,5),(2,4,0),(2,8,5),(2,1,6),(2,1,2),(2,4,0),(2,8,5),(2,4,3),
      (2,1,6),(2,4,7),(2,8,5),(2,4,0),(2,1,2),(2,4,0),(2,8,5),(2,4,3),(2,4,3),(2,9,8),(2,5,4),(2,1,2),(2,4,0),(2,4,7),
      (2,1,2),(2,8,5),(2,3,9),(2,8,5),(2,4,7),(2,1,2),(2,5,4),(2,4,0),(2,8,5),(2,1,2),(2,1,6),(2,5,4),(2,5,4),(2,2,1),
      (2,8,5),(2,4,3),(2,5,4),(2,9,8),(2,4,0),(2,5,4),(2,3,9),(2,1,2),(2,9,8),(2,4,0),(2,4,7),(2,5,4),(2,5,4),(2,9,8),
      (2,8,5),(2,9,8),(2,2,1),(2,5,4),(2,1,2),(2,9,8),(2,1,6),(2,8,5),(2,1,2),(2,1,2)),List((3,0,6),(3,8,2),(3,0,1),
      (3,0,7),(3,0,0),(3,0,3),(3,8,2),(3,3,8),(3,0,0),(3,0,3),(3,0,1),(3,0,6),(3,0,6),(3,3,8),(3,0,0),(3,0,1),(3,0,6),
      (3,2,9),(3,9,4),(3,8,2),(3,0,6),(3,0,0),(3,0,7),(3,0,5),(3,2,9),(3,3,8),(3,0,3),(3,8,2),(3,3,8),(3,0,6),(3,2,9),
      (3,0,3),(3,0,3),(3,0,3),(3,0,0),(3,0,1),(3,8,2),(3,0,5),(3,9,4),(3,0,7),(3,3,8),(3,0,3),(3,0,3),(3,2,9),(3,9,4),
      (3,0,1),(3,8,2),(3,2,9),(3,0,6),(3,8,2),(3,3,8),(3,0,3),(3,8,2),(3,0,1),(3,8,2),(3,0,3),(3,0,7),(3,8,2),(3,8,2),
      (3,8,2),(3,0,1),(3,0,6),(3,3,8),(3,0,5),(3,3,8),(3,0,1),(3,0,6),(3,0,7),(3,0,3),(3,3,8),(3,0,3),(3,8,2),(3,3,8),
      (3,8,2),(3,0,6),(3,0,7),(3,9,4),(3,8,2),(3,2,9),(3,0,1),(3,8,2),(3,0,7),(3,0,0),(3,0,7),(3,2,9),(3,0,5),(3,0,1),
      (3,0,7),(3,0,3),(3,0,1),(3,2,9),(3,9,4),(3,0,7),(3,0,3),(3,0,7),(3,3,8),(3,0,7),(3,0,5),(3,0,1),(3,0,1)),
      List((4,8,0),(4,3,3),(4,9,7),(4,3,1),(4,3,1),(4,8,0),(4,0,9),(4,0,9),(4,4,8),(4,3,3),(4,3,1),(4,4,5),(4,7,6),
        (4,3,3),(4,7,6),(4,4,5),(4,4,8),(4,3,1),(4,4,8),(4,4,5),(4,9,7),(4,7,6),(4,4,4),(4,4,4),(4,4,5),(4,3,1),(4,9,7),
        (4,4,4),(4,0,9),(4,4,4),(4,7,6),(4,4,4),(4,8,0),(4,4,8),(4,4,5),(4,7,6),(4,3,1),(4,8,0),(4,4,8),(4,4,4),(4,0,9),
        (4,7,6),(4,8,0),(4,3,3),(4,4,8),(4,0,9),(4,4,8),(4,8,0),(4,8,0),(4,0,9),(4,4,4),(4,4,4),(4,9,2),(4,0,9),(4,0,9),
        (4,7,6),(4,4,5),(4,9,7),(4,0,9),(4,9,2),(4,7,6),(4,9,7),(4,3,1),(4,3,3),(4,9,7),(4,3,1),(4,9,2),(4,9,2),(4,4,4),
        (4,3,1),(4,0,9),(4,3,3),(4,4,8),(4,0,9),(4,3,1),(4,8,0),(4,4,8),(4,9,2),(4,9,2),(4,7,6),(4,8,0),(4,4,4),(4,4,4),
        (4,4,8),(4,4,5),(4,3,1),(4,9,2),(4,3,3),(4,3,1),(4,4,4),(4,9,2),(4,4,5),(4,0,9),(4,0,9),(4,4,5),(4,4,4),(4,7,6),
        (4,0,9),(4,3,1),(4,9,2)),List((5,9,4),(5,4,0),(5,9,5),(5,9,5),(5,9,4),(5,6,1),(5,2,3),(5,9,4),(5,2,3),(5,9,9),
      (5,9,5),(5,6,1),(5,2,3),(5,0,2),(5,9,5),(5,9,4),(5,2,3),(5,9,5),(5,4,0),(5,6,1),(5,9,5),(5,5,6),(5,9,9),(5,6,1),
      (5,0,2),(5,9,4),(5,0,2),(5,4,0),(5,9,9),(5,8,8),(5,0,2),(5,1,7),(5,9,4),(5,8,8),(5,9,5),(5,2,3),(5,0,2),(5,0,2),
      (5,6,1),(5,9,5),(5,4,0),(5,6,1),(5,6,1),(5,5,6),(5,2,3),(5,0,2),(5,9,4),(5,6,1),(5,2,3),(5,2,3),(5,0,2),(5,4,0),
      (5,8,8),(5,9,5),(5,9,4),(5,1,7),(5,9,9),(5,9,4),(5,1,7),(5,4,0),(5,8,8),(5,9,9),(5,6,1),(5,6,1),(5,9,4),(5,6,1),
      (5,9,5),(5,1,7),(5,5,6),(5,1,7),(5,9,5),(5,2,3),(5,9,9),(5,4,0),(5,0,2),(5,1,7),(5,2,3),(5,6,1),(5,5,6),(5,8,8),
      (5,1,7),(5,6,1),(5,0,2),(5,0,2),(5,9,9),(5,2,3),(5,2,3),(5,4,0),(5,6,1),(5,1,7),(5,9,9),(5,2,3),(5,9,5),(5,5,6),
      (5,0,2),(5,4,0),(5,5,6),(5,4,0),(5,0,2),(5,4,0)),List((6,1,9),(6,2,8),(6,4,5),(6,8,3),(6,4,5),(6,9,1),(6,7,6),
      (6,4,5),(6,0,4),(6,1,9),(6,8,3),(6,2,8),(6,4,5),(6,3,0),(6,5,7),(6,7,6),(6,3,0),(6,5,7),(6,9,1),(6,3,0),(6,8,3),
      (6,4,5),(6,4,5),(6,3,0),(6,0,4),(6,1,9),(6,4,5),(6,0,4),(6,3,0),(6,2,8),(6,7,6),(6,1,9),(6,1,9),(6,5,7),(6,7,6),
      (6,8,3),(6,5,7),(6,7,6),(6,5,7),(6,5,7),(6,8,3),(6,7,6),(6,0,4),(6,4,5),(6,4,5),(6,8,2),(6,9,1),(6,3,0),(6,8,3),
      (6,0,4),(6,0,4),(6,8,2),(6,2,8),(6,8,3),(6,8,3),(6,8,3),(6,5,7),(6,8,3),(6,4,5),(6,1,9),(6,8,2),(6,1,9),(6,8,2),
      (6,0,4),(6,2,8),(6,1,9),(6,8,2),(6,9,1),(6,0,4),(6,2,8),(6,7,6),(6,8,2),(6,4,5),(6,9,1),(6,4,5),(6,1,9),(6,5,7),
      (6,5,7),(6,2,8),(6,4,5),(6,4,5),(6,8,3),(6,8,3),(6,2,8),(6,3,0),(6,8,2),(6,4,5),(6,7,6),(6,9,1),(6,2,8),(6,9,1),
      (6,8,2),(6,2,8),(6,5,7),(6,0,4),(6,3,0),(6,7,6),(6,4,5),(6,7,6),(6,8,3)),List((7,6,2),(7,2,1),(7,4,7),(7,4,3),
      (7,4,3),(7,2,1),(7,4,9),(7,4,3),(7,4,7),(7,5,5),(7,6,0),(7,6,4),(7,4,9),(7,4,3),(7,8,8),(7,5,5),(7,4,3),(7,6,4),
      (7,5,5),(7,2,1),(7,2,1),(7,8,8),(7,6,0),(7,2,1),(7,4,3),(7,8,8),(7,4,3),(7,4,7),(7,4,9),(7,6,0),(7,4,9),(7,4,9),
      (7,4,9),(7,4,9),(7,5,5),(7,2,1),(7,8,8),(7,8,8),(7,6,4),(7,6,0),(7,5,5),(7,4,9),(7,2,1),(7,3,6),(7,8,8),(7,3,6),
      (7,6,2),(7,6,0),(7,2,1),(7,4,9),(7,4,9),(7,4,7),(7,3,6),(7,4,7),(7,3,6),(7,3,6),(7,6,0),(7,6,4),(7,2,1),(7,4,7),
      (7,5,5),(7,6,4),(7,4,9),(7,6,0),(7,2,1),(7,4,9),(7,4,9),(7,6,0),(7,4,7),(7,4,9),(7,6,4),(7,2,1),(7,3,6),(7,4,7),
      (7,2,1),(7,3,6),(7,3,6),(7,8,8),(7,3,6),(7,6,0),(7,6,4),(7,2,1),(7,2,1),(7,4,3),(7,4,7),(7,8,8),(7,5,5),(7,3,6),
      (7,4,9),(7,5,5),(7,4,7),(7,6,4),(7,6,0),(7,6,2),(7,3,6),(7,8,8),(7,8,8),(7,2,1),(7,3,6),(7,6,2)),
      List((8,9,3),
      (8,0,7),(8,0,7),(8,8,4),(8,9,3),(8,8,9),(8,9,0),(8,8,9),(8,9,3),(8,9,2),(8,0,7),(8,9,3),(8,9,3),(8,7,8),(8,9,3),
      (8,7,8),(8,9,0),(8,0,7),(8,1,5),(8,9,0),(8,8,9),(8,4,6),(8,8,9),(8,8,4),(8,9,3),(8,1,5),(8,8,4),(8,1,5),(8,8,9),
      (8,8,4),(8,9,0),(8,8,4),(8,8,9),(8,4,6),(8,4,6),(8,8,4),(8,9,2),(8,4,6),(8,7,8),(8,9,2),(8,9,3),(8,8,1),(8,1,5),
      (8,9,2),(8,8,1),(8,8,9),(8,8,1),(8,9,3),(8,1,5),(8,9,2),(8,9,2),(8,1,5),(8,8,9),(8,0,7),(8,0,7),(8,0,7),(8,0,7),
      (8,9,3),(8,8,4),(8,4,6),(8,7,8),(8,9,2),(8,7,8),(8,9,2),(8,9,3),(8,9,0),(8,4,6),(8,8,1),(8,9,3),(8,9,0),(8,4,6),
      (8,9,0),(8,8,9),(8,8,1),(8,4,6),(8,8,4),(8,0,7),(8,9,0),(8,9,0),(8,0,7),(8,9,3),(8,4,6),(8,8,9),(8,9,0),(8,8,1),
      (8,9,3),(8,8,9),(8,9,0),(8,1,5),(8,0,7),(8,8,9),(8,0,7),(8,0,7),(8,4,6),(8,8,9),(8,1,5),(8,7,8),(8,8,9),(8,8,1),
      (8,1,5)), List((9,7,1),(9,0,8),(9,9,0),(9,9,0),(9,3,4),(9,3,4),(9,3,3),(9,3,3),(9,7,1),(9,2,2),(9,7,1),(9,3,3),
      (9,9,0),(9,2,2),(9,0,8),(9,3,4),(9,3,7),(9,2,2),(9,3,4),(9,3,3),(9,1,6),(9,0,8),(9,9,5),(9,2,2),(9,0,8),(9,3,7),
      (9,7,1),(9,7,1),(9,1,6),(9,3,3),(9,3,7),(9,6,9),(9,1,6),(9,9,5),(9,1,6),(9,3,7),(9,0,8),(9,7,1),(9,9,0),(9,6,9),
      (9,3,7),(9,3,7),(9,3,7),(9,7,1),(9,3,4),(9,0,8),(9,3,3),(9,9,5),(9,1,6),(9,0,8),(9,3,7),(9,7,1),(9,3,3),(9,9,5),
      (9,3,7),(9,3,3),(9,6,9),(9,3,7),(9,1,6),(9,7,1),(9,3,7),(9,2,2),(9,6,9),(9,6,9),(9,9,5),(9,7,1),(9,9,5),(9,0,8),
      (9,3,7),(9,0,8),(9,9,5),(9,7,1),(9,3,4),(9,0,8),(9,9,5),(9,3,7),(9,9,5),(9,7,1),(9,1,6),(9,0,8),(9,0,8),(9,1,6),
      (9,0,8),(9,1,6),(9,0,8),(9,9,0),(9,9,0),(9,6,9),(9,3,4),(9,3,3),(9,3,7),(9,3,3),(9,3,4),(9,0,8),(9,9,0),(9,0,8),
      (9,3,4),(9,3,4),(9,0,8),(9,3,3)))
    val actual=global_line_partition(worker_result, master_result, local_k_cluster)
    assertEquals("global_line_partition_test size comparison",expected.size,actual.size)
    /*expected.indices.foreach(i=>{
      expected(i).indices.foreach(j=>{
        assertEquals(s"element index $i,$j",expected(i)(j),actual(i)(j))
      })
    })*/
  }
  @org.junit.Test
  def BlockSufficientStatistics_indexes_test(): Unit = {
   val  map_localPart_globalPart: List[(Int, Int, Int)]=List((0,0,0))
   val  countRow: Int=0
   val countCol: Int=0
   val partitionOtherDimension: List[Int]=List(0)
    assertEquals(0,0)
  }
}
